import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings('ignore')

class SalesBasedRecommenderSystem:
    def __init__(self):
        self.processed_data = None
        self.le_magazin = LabelEncoder()
        self.le_art = LabelEncoder()
        self.segment_stats = None
        self.item_stats = None
        
    def process_datasales(self, df):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ Datasales —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
        if 'Datasales' not in df.columns:
            return df
        
        datasales_col = df['Datasales'].copy()
        non_null_dates = datasales_col.dropna()
        
        if len(non_null_dates) == 0:
            return df
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        try:
            parsed_dates = pd.to_datetime(datasales_col, errors='coerce')
            if parsed_dates.notna().sum() > len(non_null_dates) * 0.8:
                df['Datasales'] = parsed_dates.astype('datetime64[ns]')
                df['Month'] = df['Datasales'].dt.month
                df['Quarter'] = df['Datasales'].dt.quarter
                df['Year'] = df['Datasales'].dt.year
                st.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ Datasales –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        except:
            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É Datasales")
        
        return df
    
    def process_data(self, df, selected_segment=None):
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É"""
        df = df.copy()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
        df = self.process_datasales(df)
        
        # –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
        df = df.dropna(subset=['Magazin', 'Art', 'Price', 'Qty', 'Segment'])
        df = df[df['Price'] > 0]
        df = df[df['Qty'] > 0]
        
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É
        df['Magazin'] = df['Magazin'].astype(str)
        df['Art'] = df['Art'].astype(str)
        df['Segment'] = df['Segment'].astype(str)
        df['Model'] = df['Model'].astype(str)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É
        if selected_segment and selected_segment != '–í—Å–µ':
            df = df[df['Segment'] == selected_segment]
            
        if len(df) == 0:
            return None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        self.item_stats = df.groupby('Art').agg({
            'Qty': ['sum', 'count'],  # –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            'Magazin': 'nunique',    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
            'Price': 'mean',         # —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
            'Segment': 'first',      # —Å–µ–≥–º–µ–Ω—Ç
            'Model': 'first'         # –º–æ–¥–µ–ª—å
        }).round(2)
        
        # –£–ø—Ä–æ—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
        self.item_stats.columns = ['total_qty', 'transactions', 'stores', 'avg_price', 'segment', 'model']
        self.item_stats.reset_index(inplace=True)
        
        # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –º–∞–≥–∞–∑–∏–Ω-—Ç–æ–≤–∞—Ä
        agg_data = df.groupby(['Magazin', 'Art']).agg({
            'Qty': 'sum',
            'Price': 'mean',
            'Segment': 'first',
            'Model': 'first'
        }).reset_index()
        
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        agg_data['magazin_encoded'] = self.le_magazin.fit_transform(agg_data['Magazin'])
        agg_data['art_encoded'] = self.le_art.fit_transform(agg_data['Art'])
        
        self.processed_data = agg_data
        return agg_data
    
    def calculate_segment_statistics(self, df):
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º"""
        segment_stats = df.groupby('Segment').agg({
            'Art': 'nunique',
            'Magazin': 'nunique', 
            'Qty': ['sum', 'mean'],
            'Price': 'mean'
        }).round(2)
        
        segment_stats.columns = ['unique_items', 'unique_stores', 'total_qty', 'avg_qty_per_transaction', 'avg_price']
        segment_stats.reset_index(inplace=True)
        segment_stats = segment_stats.sort_values('total_qty', ascending=False)
        
        self.segment_stats = segment_stats
        return segment_stats
    
    def get_recommendations_by_sales(self, magazin_name, top_k=10, min_transactions=2):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à—Ç—É—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂"""
        if self.processed_data is None or self.item_stats is None:
            return None
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–∞–≥–∞–∑–∏–Ω —É–∂–µ –ø–æ–∫—É–ø–∞–ª
            magazin_items = set(self.processed_data[
                self.processed_data['Magazin'] == magazin_name
            ]['Art'].values)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            eligible_items = self.item_stats[
                (self.item_stats['transactions'] >= min_transactions) &
                (~self.item_stats['Art'].isin(magazin_items))
            ].copy()
            
            if len(eligible_items) == 0:
                return []
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à—Ç—É—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
            eligible_items = eligible_items.sort_values('total_qty', ascending=False)
            
            # –í—ã–±–æ—Ä —Ç–æ–ø-K —Ç–æ–≤–∞—Ä–æ–≤
            top_items = eligible_items.head(top_k).reset_index(drop=True)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations = []
            for idx, row in top_items.iterrows():
                recommendations.append({
                    'rank': idx + 1,
                    'item': row['Art'],
                    'total_qty': int(row['total_qty']),
                    'transactions': int(row['transactions']),
                    'stores': int(row['stores']),
                    'avg_price': row['avg_price'],
                    'segment': row['segment'],
                    'model': row['model']
                })
            
            return recommendations
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
            return None
    
    def get_top_items_statistics(self, top_n=20):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–æ–ø —Ç–æ–≤–∞—Ä–∞–º"""
        if self.item_stats is None:
            return None
        
        return self.item_stats.sort_values('total_qty', ascending=False).head(top_n)
    
    def get_store_statistics(self, magazin_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É"""
        if self.processed_data is None:
            return None
        
        store_data = self.processed_data[self.processed_data['Magazin'] == magazin_name]
        
        if len(store_data) == 0:
            return None
        
        stats = {
            'total_items': len(store_data),
            'total_qty': store_data['Qty'].sum(),
            'avg_qty_per_item': store_data['Qty'].mean(),
            'segments': store_data['Segment'].nunique(),
            'top_segment': store_data.groupby('Segment')['Qty'].sum().idxmax(),
            'avg_price': store_data['Price'].mean()
        }
        
        return stats

def create_dashboard():
    st.set_page_config(page_title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", layout="wide")
    
    st.title("üõçÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à—Ç—É—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂")
    st.markdown("*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à—Ç—É—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂*")
    st.markdown("---")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    if 'recommender' not in st.session_state:
        st.session_state.recommender = SalesBasedRecommenderSystem()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    uploaded_file = st.sidebar.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª", 
        type=['xlsx', 'xls'],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: Magazin, Art, Segment, Model, Price, Qty"
    )
    
    if uploaded_file is not None:
        try:
            # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            df = pd.read_excel(uploaded_file)
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤
            if 'Price' in df.columns:
                df['Price'] = pd.to_numeric(df['Price'], errors='coerce')
            if 'Qty' in df.columns:
                df['Qty'] = pd.to_numeric(df['Qty'], errors='coerce')
            
            df = df.dropna(subset=['Price', 'Qty'])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
            required_cols = ['Magazin', 'Art', 'Segment', 'Model', 'Price', 'Qty']
            missing_cols = [col for col in required_cols if col not in df.columns]
            
            if missing_cols:
                st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
                return
            
            if len(df) == 0:
                st.error("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
                return
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É
            st.sidebar.header("üéØ –§–∏–ª—å—Ç—Ä—ã")
            segments = ['–í—Å–µ'] + sorted(df['Segment'].unique().tolist())
            selected_segment = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç:", segments)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            min_transactions = st.sidebar.number_input(
                "–ú–∏–Ω–∏–º—É–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
                min_value=1, max_value=50, value=2
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            processed_df = st.session_state.recommender.process_data(df, selected_segment)
            
            if processed_df is None:
                st.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ '{selected_segment}'")
                return
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
            segment_stats = st.session_state.recommender.calculate_segment_statistics(df)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–ó–∞–ø–∏—Å–µ–π", len(processed_df))
            with col2:
                st.metric("–ú–∞–≥–∞–∑–∏–Ω–æ–≤", processed_df['Magazin'].nunique())
            with col3:
                st.metric("–¢–æ–≤–∞—Ä–æ–≤", processed_df['Art'].nunique())
            with col4:
                current_segment = selected_segment if selected_segment != '–í—Å–µ' else '–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã'
                st.metric("–°–µ–≥–º–µ–Ω—Ç", current_segment)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            st.markdown("---")
            
            # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            tab1, tab2, tab3 = st.tabs(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üìà –¢–æ–ø —Ç–æ–≤–∞—Ä—ã"])
            
            with tab1:
                st.header("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
                    if segment_stats is not None:
                        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        display_segment_stats = segment_stats.rename(columns={
                            'Segment': '–°–µ–≥–º–µ–Ω—Ç',
                            'unique_items': '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
                            'unique_stores': '–ú–∞–≥–∞–∑–∏–Ω–æ–≤',
                            'total_qty': '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                            'avg_qty_per_transaction': '–°—Ä–µ–¥–Ω–µ–µ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é',
                            'avg_price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'
                        })
                        st.dataframe(display_segment_stats, use_container_width=True)
                
                with col2:
                    st.subheader("–¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º")
                    top_items = st.session_state.recommender.get_top_items_statistics(10)
                    if top_items is not None:
                        display_top_items = top_items[['Art', 'total_qty', 'transactions', 'stores', 'segment']].rename(columns={
                            'Art': '–¢–æ–≤–∞—Ä',
                            'total_qty': '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                            'transactions': '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
                            'stores': '–ú–∞–≥–∞–∑–∏–Ω–æ–≤',
                            'segment': '–°–µ–≥–º–µ–Ω—Ç'
                        })
                        st.dataframe(display_top_items, use_container_width=True)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    total_qty = df['Qty'].sum() if selected_segment == '–í—Å–µ' else df[df['Segment'] == selected_segment]['Qty'].sum()
                    st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂", f"{total_qty:,}")
                
                with col2:
                    avg_transaction = df['Qty'].mean() if selected_segment == '–í—Å–µ' else df[df['Segment'] == selected_segment]['Qty'].mean()
                    st.metric("–°—Ä–µ–¥–Ω–µ–µ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", f"{avg_transaction:.2f}")
                
                with col3:
                    current_data = df if selected_segment == '–í—Å–µ' else df[df['Segment'] == selected_segment]
                    unique_pairs = len(current_data.groupby(['Magazin', 'Art']).size())
                    st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä –º–∞–≥–∞–∑–∏–Ω-—Ç–æ–≤–∞—Ä", unique_pairs)
                
                with col4:
                    avg_price = df['Price'].mean() if selected_segment == '–í—Å–µ' else df[df['Segment'] == selected_segment]['Price'].mean()
                    st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{avg_price:.2f}")
            
            with tab2:
                st.header("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞")
                
                col1, col2 = st.columns([2, 1])
                with col1:
                    selected_store = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:",
                        options=st.session_state.recommender.le_magazin.classes_
                        if hasattr(st.session_state.recommender, 'le_magazin') and 
                           hasattr(st.session_state.recommender.le_magazin, 'classes_')
                        else processed_df['Magazin'].unique()
                    )
                with col2:
                    top_k = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:", 5, 20, 10)
                
                if st.button("üöÄ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", type="primary"):
                    recommendations = st.session_state.recommender.get_recommendations_by_sales(
                        selected_store, top_k, min_transactions
                    )
                    
                    if recommendations:
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                        st.subheader(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞: {selected_store}")
                        
                        rec_df = pd.DataFrame(recommendations)
                        display_rec_df = rec_df.rename(columns={
                            'rank': '–†–∞–Ω–≥',
                            'item': '–¢–æ–≤–∞—Ä',
                            'total_qty': '–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏',
                            'transactions': '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
                            'stores': '–ú–∞–≥–∞–∑–∏–Ω–æ–≤',
                            'avg_price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞',
                            'segment': '–°–µ–≥–º–µ–Ω—Ç',
                            'model': '–ú–æ–¥–µ–ª—å'
                        })
                        
                        st.dataframe(display_rec_df, use_container_width=True)
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            total_potential_sales = rec_df['total_qty'].sum()
                            st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–æ–¥–∞–∂", f"{total_potential_sales:,}")
                        with col2:
                            avg_transactions = rec_df['transactions'].mean()
                            st.metric("–°—Ä–µ–¥–Ω–µ–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", f"{avg_transactions:.1f}")
                        with col3:
                            avg_stores = rec_df['stores'].mean()
                            st.metric("–°—Ä–µ–¥–Ω–µ–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤", f"{avg_stores:.1f}")
                        with col4:
                            avg_price = rec_df['avg_price'].mean()
                            st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{avg_price:.2f}")
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
                        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞")
                        store_stats = st.session_state.recommender.get_store_statistics(selected_store)
                        
                        if store_stats:
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric("–¢–æ–≤–∞—Ä–æ–≤ –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ", store_stats['total_items'])
                            with col2:
                                st.metric("–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏", f"{store_stats['total_qty']:,}")
                            with col3:
                                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤", store_stats['segments'])
                            with col4:
                                st.metric("–¢–æ–ø —Å–µ–≥–º–µ–Ω—Ç", store_stats['top_segment'])
                    
                    else:
                        st.info("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞")
            
            with tab3:
                st.header("üìà –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤")
                
                col1, col2 = st.columns([1, 1])
                with col1:
                    top_n_items = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", 10, 50, 20)
                
                top_items_full = st.session_state.recommender.get_top_items_statistics(top_n_items)
                
                if top_items_full is not None:
                    # –ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤
                    st.subheader(f"–¢–æ–ø {top_n_items} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —à—Ç—É—á–Ω—ã–º –ø—Ä–æ–¥–∞–∂–∞–º")
                    
                    display_items = top_items_full.rename(columns={
                        'Art': '–¢–æ–≤–∞—Ä',
                        'total_qty': '–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏',
                        'transactions': '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
                        'stores': '–ú–∞–≥–∞–∑–∏–Ω–æ–≤', 
                        'avg_price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞',
                        'segment': '–°–µ–≥–º–µ–Ω—Ç',
                        'model': '–ú–æ–¥–µ–ª—å'
                    })
                    
                    st.dataframe(display_items, use_container_width=True)
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.subheader("–ü–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
                        segment_analysis = top_items_full.groupby('segment')['total_qty'].sum().sort_values(ascending=False)
                        st.bar_chart(segment_analysis)
                    
                    with col2:
                        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                        bins = [0, 5, 10, 20, 50, float('inf')]
                        labels = ['1-5', '6-10', '11-20', '21-50', '50+']
                        top_items_full['transaction_group'] = pd.cut(
                            top_items_full['transactions'], 
                            bins=bins, 
                            labels=labels, 
                            right=False
                        )
                        transaction_dist = top_items_full['transaction_group'].value_counts()
                        st.bar_chart(transaction_dist)
                    
                    with col3:
                        st.subheader("–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
                        st.metric("–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤", f"{top_items_full['total_qty'].sum():,}")
                        st.metric("–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Ç–æ–≤–∞—Ä", f"{top_items_full['total_qty'].mean():.0f}")
                        st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{top_items_full['avg_price'].mean():.2f}")
                        st.metric("–õ–∏–¥–∏—Ä—É—é—â–∏–π —Å–µ–≥–º–µ–Ω—Ç", top_items_full.groupby('segment')['total_qty'].sum().idxmax())
                
                # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if top_items_full is not None:
                    @st.cache_data
                    def convert_df_to_csv(df):
                        return df.to_csv(index=False, encoding='utf-8').encode('utf-8')
                    
                    csv_data = convert_df_to_csv(display_items)
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å —Ç–æ–ø —Ç–æ–≤–∞—Ä—ã (CSV)",
                        data=csv_data,
                        file_name=f'top_items_{selected_segment.lower().replace(" ", "_")}.csv',
                        mime='text/csv'
                    )
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            st.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞")
    
    else:
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        
        st.markdown("### üìã –¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
        cols = st.columns(2)
        with cols[0]:
            st.markdown("- **Magazin** - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞")
            st.markdown("- **Art** - –∫–æ–¥/–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞") 
            st.markdown("- **Segment** - —Å–µ–≥–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞")
        with cols[1]:
            st.markdown("- **Model** - –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞")
            st.markdown("- **Price** - —Ü–µ–Ω–∞")
            st.markdown("- **Qty** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç—É–∫–∏)")
        
        st.markdown("### üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:")
        st.markdown("- **–ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º** - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É")
        st.markdown("- **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º** - —Ç–æ–≤–∞—Ä—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ —à—Ç—É—á–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏")
        st.markdown("- **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏** - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        st.markdown("- **–¢–∞–±–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º")

if __name__ == "__main__":
    create_dashboard()
