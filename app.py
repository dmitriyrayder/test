import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from io import BytesIO
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤", page_icon="üõçÔ∏è", layout="wide")

@st.cache_data
def load_and_process_data(uploaded_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        df = pd.read_excel(uploaded_file)
        required_cols = ['Magazin', 'Datasales', 'Art', 'Describe', 'Model', 'Segment', 'Price', 'Qty', 'Sum']
        missing_cols = [col for col in required_cols if col not in df.columns]
        if missing_cols:
            st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            return None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
        date_formats = ['%d.%m.%Y', '%d/%m/%Y', '%Y-%m-%d', '%d-%m-%Y', '%d.%m.%y', '%d/%m/%y']
        for fmt in date_formats:
            try:
                df['Datasales'] = pd.to_datetime(df['Datasales'], format=fmt, errors='coerce')
                break
            except:
                continue
        if df['Datasales'].isna().all():
            df['Datasales'] = pd.to_datetime(df['Datasales'], infer_datetime_format=True, errors='coerce')
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = df.dropna(subset=['Art', 'Magazin', 'Segment'])
        for col in ['Qty', 'Price', 'Sum']:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        df = df.drop_duplicates()
        df['Month'] = df['Datasales'].dt.month
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def calculate_abc_analysis(df, segment):
    """ABC –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    segment_data = df[df['Segment'] == segment]
    product_revenue = segment_data.groupby('Art')['Sum'].sum().sort_values(ascending=False)
    
    if product_revenue.empty or product_revenue.sum() == 0:
        return pd.DataFrame(columns=['Art', 'Revenue', 'ABC'])
    
    total_revenue = product_revenue.sum()
    cumulative_revenue = product_revenue.cumsum()
    cumulative_percentage = (cumulative_revenue / total_revenue) * 100
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ABC
    abc_categories = pd.cut(cumulative_percentage, 
                           bins=[0, 80, 95, 100], 
                           labels=['A', 'B', 'C'],
                           include_lowest=True)
    
    abc_df = pd.DataFrame({
        'Art': product_revenue.index,
        'Revenue': product_revenue.values,
        'ABC': abc_categories
    })
    return abc_df

def analyze_product_lifecycle(df, segment):
    """–ê–Ω–∞–ª–∏–∑ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    segment_data = df[df['Segment'] == segment]
    
    lifecycle_data = []
    
    for art in segment_data['Art'].unique():
        product_data = segment_data[segment_data['Art'] == art]
        monthly_sales = product_data.groupby('Month')['Qty'].sum()
        
        if len(monthly_sales) == 0:
            continue
            
        total_sales = monthly_sales.sum()
        months_active = len(monthly_sales[monthly_sales > 0])
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö
        if months_active <= 2:
            stage = '–í–Ω–µ–¥—Ä–µ–Ω–∏–µ'
        elif len(monthly_sales) >= 6:  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            recent_avg = monthly_sales.iloc[-3:].mean()
            early_avg = monthly_sales.iloc[:3].mean()
            if recent_avg > early_avg * 1.1:
                stage = '–†–æ—Å—Ç'
            elif monthly_sales.std() < monthly_sales.mean() * 0.3:
                stage = '–ó—Ä–µ–ª–æ—Å—Ç—å'
            else:
                stage = '–°–ø–∞–¥'
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç—Ä–µ–Ω–¥—É
            if monthly_sales.is_monotonic_increasing:
                stage = '–†–æ—Å—Ç'
            else:
                stage = '–ó—Ä–µ–ª–æ—Å—Ç—å'
        
        lifecycle_data.append({
            'Art': art,
            'Describe': product_data['Describe'].iloc[0],
            'Total_Sales': total_sales,
            'Months_Active': months_active,
            'Stage': stage,
            'Avg_Monthly_Sales': total_sales / months_active if months_active > 0 else 0
        })
    
    return pd.DataFrame(lifecycle_data)

def generate_alerts(df, store, segment, recommendations):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    alerts = []
    
    # –ê–ª–µ—Ä—Ç 1: –¢–æ–≤–∞—Ä—ã —Å —Ä–µ–∑–∫–∏–º –ø–∞–¥–µ–Ω–∏–µ–º –ø—Ä–æ–¥–∞–∂ - –ò–°–ü–†–ê–í–õ–ï–ù–û
    if df['Datasales'].notna().any():
        recent_data = df[df['Datasales'] >= df['Datasales'].max() - pd.Timedelta(days=30)]
        store_data = recent_data[(recent_data['Magazin'] == store) & (recent_data['Segment'] == segment)]
        
        if not store_data.empty:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—É–º–º—ã –∑–∞ –ø–µ—Ä–∏–æ–¥, –∞ –Ω–µ —Å—Ä–µ–¥–Ω–∏–µ
            recent_sales = store_data.groupby('Art')['Qty'].sum()
            
            # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            previous_period_start = df['Datasales'].max() - pd.Timedelta(days=60)
            previous_period_end = df['Datasales'].max() - pd.Timedelta(days=30)
            previous_data = df[(df['Datasales'] >= previous_period_start) & 
                              (df['Datasales'] < previous_period_end) &
                              (df['Magazin'] == store) & 
                              (df['Segment'] == segment)]
            previous_sales = previous_data.groupby('Art')['Qty'].sum()
            
            for art in recent_sales.index:
                if art in previous_sales.index and previous_sales[art] > 0:
                    decline_pct = (previous_sales[art] - recent_sales[art]) / previous_sales[art]
                    if decline_pct > 0.5:  # –ü–∞–¥–µ–Ω–∏–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 50%
                        product_name = df[df['Art'] == art]['Describe'].iloc[0]
                        alerts.append({
                            'type': 'warning',
                            'title': '–ü–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂',
                            'message': f'–¢–æ–≤–∞—Ä "{product_name}" ({art}) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –Ω–∞ {decline_pct*100:.0f}%',
                            'priority': 'high'
                        })
    
    # –ê–ª–µ—Ä—Ç 2: –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    if not recommendations.empty:
        top_opportunities = recommendations.head(3)
        for _, row in top_opportunities.iterrows():
            alerts.append({
                'type': 'success',
                'title': '–ù–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å',
                'message': f'–¢–æ–≤–∞—Ä "{row["Describe"]}" ({row["Art"]}) –∏–º–µ–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª {int(row["Potential_Qty"])} –ø—Ä–æ–¥–∞–∂',
                'priority': 'medium'
            })
    
    # –ê–ª–µ—Ä—Ç 3: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ - –ò–°–ü–†–ê–í–õ–ï–ù–û
    segment_data = df[df['Segment'] == segment]
    store_data = df[(df['Magazin'] == store) & (df['Segment'] == segment)]
    
    segment_unique = segment_data['Art'].nunique()
    store_unique = store_data['Art'].nunique()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    if segment_unique > 0:
        coverage = (store_unique / segment_unique * 100)
        if coverage < 20:
            alerts.append({
                'type': 'error',
                'title': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ',
                'message': f'–ü–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ {coverage:.1f}%',
                'priority': 'high'
            })
    
    return alerts

def calculate_seasonality(df, segment):
    """–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    segment_data = df[df['Segment'] == segment]
    monthly_sales = segment_data.groupby('Month')['Qty'].sum().reindex(range(1, 13), fill_value=0)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if monthly_sales.sum() == 0:
        month_names = {1:'–Ø–Ω–≤', 2:'–§–µ–≤', 3:'–ú–∞—Ä', 4:'–ê–ø—Ä', 5:'–ú–∞–π', 6:'–ò—é–Ω',
                       7:'–ò—é–ª', 8:'–ê–≤–≥', 9:'–°–µ–Ω', 10:'–û–∫—Ç', 11:'–ù–æ—è', 12:'–î–µ–∫'}
        return {
            'months': [month_names[i] for i in range(1, 13)],
            'sales': monthly_sales.values,
            'peak_month': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'low_month': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        }
    
    peak_month = monthly_sales.idxmax()
    low_month = monthly_sales.idxmin()
    
    month_names = {1:'–Ø–Ω–≤', 2:'–§–µ–≤', 3:'–ú–∞—Ä', 4:'–ê–ø—Ä', 5:'–ú–∞–π', 6:'–ò—é–Ω',
                   7:'–ò—é–ª', 8:'–ê–≤–≥', 9:'–°–µ–Ω', 10:'–û–∫—Ç', 11:'–ù–æ—è', 12:'–î–µ–∫'}
    
    seasonality_data = {
        'months': [month_names[i] for i in range(1, 13)],
        'sales': monthly_sales.values,
        'peak_month': month_names[peak_month],
        'low_month': month_names[low_month]
    }
    return seasonality_data

def generate_recommendations_with_abc(df, store, segment, min_network_qty=10, max_store_qty=2):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å ABC –∞–Ω–∞–ª–∏–∑–æ–º"""
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ç–∏
    segment_data = df[df['Segment'] == segment]
    network_stats = segment_data.groupby('Art').agg({
        'Qty': ['sum', 'count'],
        'Sum': 'sum',
        'Price': 'mean',
        'Describe': 'first',
        'Model': 'first',
        'Magazin': 'nunique'
    }).reset_index()
    network_stats.columns = ['Art', 'Total_Qty', 'Sales_Count', 'Total_Sum', 'Avg_Price', 'Describe', 'Model', 'Store_Count']
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É
    store_data = df[(df['Magazin'] == store) & (df['Segment'] == segment)]
    store_stats = store_data.groupby('Art')['Qty'].sum().reset_index()
    store_stats.columns = ['Art', 'Store_Qty']
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    merged = network_stats.merge(store_stats, on='Art', how='left')
    merged['Store_Qty'] = merged['Store_Qty'].fillna(0)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filtered = merged[
        (merged['Total_Qty'] >= min_network_qty) &
        (merged['Store_Qty'] <= max_store_qty)
    ]
    
    # ABC –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    abc_df = calculate_abc_analysis(df, segment)
    filtered = filtered.merge(abc_df[['Art', 'ABC']], on='Art', how='left')
    
    # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
    filtered['Potential_Qty'] = (filtered['Total_Qty'] / filtered['Store_Count']).round(0)
    filtered['Potential_Sum'] = filtered['Potential_Qty'] * filtered['Avg_Price']
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    filtered = filtered.sort_values('Potential_Qty', ascending=False)
    
    return filtered

def create_statistics_table(df, store, segment, recommendations, abc_df, lifecycle_df):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    segment_data = df[df['Segment'] == segment]
    store_data = df[(df['Magazin'] == store) & (df['Segment'] == segment)]
    
    stats = []
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ', 
                  '–ó–Ω–∞—á–µ–Ω–∏–µ': segment_data['Art'].nunique()})
    stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–¢–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ', 
                  '–ó–Ω–∞—á–µ–Ω–∏–µ': store_data['Art'].nunique()})
    stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–ü–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞', 
                  '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{(store_data['Art'].nunique() / segment_data['Art'].nunique() * 100):.1f}%" if segment_data['Art'].nunique() > 0 else "0%"})
    
    # ABC —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if not abc_df.empty:
        for category in ['A', 'B', 'C']:
            count = len(abc_df[abc_df['ABC'] == category])
            stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': 'ABC –ê–Ω–∞–ª–∏–∑', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': f'–¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}', 
                         '–ó–Ω–∞—á–µ–Ω–∏–µ': count})
    
    # –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
    if not lifecycle_df.empty:
        for stage in ['–í–Ω–µ–¥—Ä–µ–Ω–∏–µ', '–†–æ—Å—Ç', '–ó—Ä–µ–ª–æ—Å—Ç—å', '–°–ø–∞–¥']:
            count = len(lifecycle_df[lifecycle_df['Stage'] == stage])
            stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': stage, 
                         '–ó–Ω–∞—á–µ–Ω–∏–µ': count})
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if not recommendations.empty:
        stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–¢–æ–≤–∞—Ä–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ', 
                     '–ó–Ω–∞—á–µ–Ω–∏–µ': len(recommendations)})
        stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–æ–¥–∞–∂ (—à—Ç)', 
                     '–ó–Ω–∞—á–µ–Ω–∏–µ': int(recommendations['Potential_Qty'].sum())})
        stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ (–≥—Ä–Ω)', 
                     '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{recommendations['Potential_Sum'].sum():,.0f}"})
    
    return pd.DataFrame(stats)

def create_excel_report(df, store, segment, recommendations, abc_df, seasonality_data, lifecycle_df, alerts):
    """–°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞"""
    output = BytesIO()
    
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # –õ–∏—Å—Ç 1: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not recommendations.empty:
            recommendations.to_excel(writer, sheet_name='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', index=False)
        
        # –õ–∏—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_table = create_statistics_table(df, store, segment, recommendations, abc_df, lifecycle_df)
        stats_table.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
        
        # –õ–∏—Å—Ç 3: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Ç–æ–≤–∞—Ä–æ–≤
        lifecycle_df.to_excel(writer, sheet_name='–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª', index=False)
        
        # –õ–∏—Å—Ç 4: –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        season_df = pd.DataFrame({
            '–ú–µ—Å—è—Ü': seasonality_data['months'],
            '–ü—Ä–æ–¥–∞–∂–∏': seasonality_data['sales']
        })
        season_df.to_excel(writer, sheet_name='–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', index=False)
        
        # –õ–∏—Å—Ç 5: –ê–ª–µ—Ä—Ç—ã
        if alerts:
            alerts_df = pd.DataFrame(alerts)
            alerts_df.to_excel(writer, sheet_name='–ê–ª–µ—Ä—Ç—ã', index=False)
    
    output.seek(0)
    return output

def display_alerts(alerts):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤"""
    if not alerts:
        return
    
    st.subheader("üö® –ê–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    for alert in alerts:
        if alert['type'] == 'error':
            st.error(f"**{alert['title']}**: {alert['message']}")
        elif alert['type'] == 'warning':
            st.warning(f"**{alert['title']}**: {alert['message']}")
        elif alert['type'] == 'success':
            st.success(f"**{alert['title']}**: {alert['message']}")
        else:
            st.info(f"**{alert['title']}**: {alert['message']}")

def display_results(df, store, segment, recommendations, seasonality_data, lifecycle_df, alerts, abc_df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    # –ê–ª–µ—Ä—Ç—ã
    display_alerts(alerts)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    segment_data = df[df['Segment'] == segment]
    store_data = df[(df['Magazin'] == store) & (df['Segment'] == segment)]
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–¢–æ–≤–∞—Ä–æ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ", segment_data['Art'].nunique())
    with col2:
        st.metric("–¢–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", store_data['Art'].nunique())
    with col3:
        coverage = (store_data['Art'].nunique() / segment_data['Art'].nunique() * 100) if segment_data['Art'].nunique() > 0 else 0
        st.metric("–ü–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞", f"{coverage:.1f}%")
    with col4:
        avg_sales = segment_data.groupby('Art')['Qty'].sum().mean()
        st.metric("–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ —Å–µ—Ç–∏", f"{avg_sales:.1f} —à—Ç")
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    if not recommendations.empty:
        display_df = recommendations[['Art', 'Describe', 'Model', 'Avg_Price', 'Total_Qty', 
                                    'Store_Qty', 'Potential_Qty', 'Store_Count', 'ABC']].copy()
        display_df.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ú–æ–¥–µ–ª—å', '–¶–µ–Ω–∞', '–ü—Ä–æ–¥–∞–∂–∏ —Å–µ—Ç–∏', 
                             '–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞', '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª', '–ú–∞–≥–∞–∑–∏–Ω–æ–≤', 'ABC']
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ ABC - –∏—Å–ø–æ–ª—å–∑—É–µ–º map –≤–º–µ—Å—Ç–æ applymap
        def highlight_abc(val):
            colors = {'A': 'background-color: #90EE90', 'B': 'background-color: #FFE4B5', 'C': 'background-color: #FFB6C1'}
            return colors.get(val, '')
        
        styled_df = display_df.style.map(highlight_abc, subset=['ABC'])
        st.dataframe(styled_df, use_container_width=True, height=400)
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–û–±—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª (—à—Ç)", int(recommendations['Potential_Qty'].sum()))
        with col2:
            st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞", f"{recommendations['Potential_Sum'].sum():,.0f} –≥—Ä–Ω")
    else:
        st.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
    
    # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    st.subheader("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    stats_table = create_statistics_table(df, store, segment, recommendations, abc_df, lifecycle_df)
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    categories = stats_table['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique()
    
    for category in categories:
        if category != '':
            st.write(f"**{category}**")
            category_data = stats_table[stats_table['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category]
            category_display = category_data[['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ']].copy()
            st.dataframe(category_display, use_container_width=True, hide_index=True)
            st.write("")
    
    # –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Ç–æ–≤–∞—Ä–æ–≤
    st.subheader("üîÑ –ê–Ω–∞–ª–∏–∑ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    if not lifecycle_df.empty:
        stage_summary = lifecycle_df['Stage'].value_counts()
        
        col1, col2, col3, col4 = st.columns(4)
        stages = ['–í–Ω–µ–¥—Ä–µ–Ω–∏–µ', '–†–æ—Å—Ç', '–ó—Ä–µ–ª–æ—Å—Ç—å', '–°–ø–∞–¥']
        icons = ['üöÄ', 'üìà', '‚öñÔ∏è', 'üìâ']
        
        for i, (stage, icon) in enumerate(zip(stages, icons)):
            with [col1, col2, col3, col4][i]:
                st.metric(f"{icon} {stage}", stage_summary.get(stage, 0))
        
        lifecycle_display = lifecycle_df[['Art', 'Describe', 'Stage', 'Total_Sales', 'Months_Active']].copy()
        lifecycle_display.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°—Ç–∞–¥–∏—è', '–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂', '–ú–µ—Å—è—Ü–µ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏']
        st.dataframe(lifecycle_display, use_container_width=True)
        
        fig_lifecycle = px.pie(values=stage_summary.values, names=stage_summary.index,
                              title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—Ç–∞–¥–∏—è–º –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
        st.plotly_chart(fig_lifecycle, use_container_width=True)
    
    # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
    st.subheader("üìÖ –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏")
    season_fig = px.line(x=seasonality_data['months'], y=seasonality_data['sales'],
                        title=f"–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ {segment}",
                        labels={'x': '–ú–µ—Å—è—Ü', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂'})
    if seasonality_data['peak_month'] != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
        season_fig.add_annotation(x=seasonality_data['peak_month'], y=max(seasonality_data['sales']),
                                 text=f"–ü–∏–∫: {seasonality_data['peak_month']}", showarrow=True, arrowcolor="green")
    st.plotly_chart(season_fig, use_container_width=True)
    
    col1, col2 = st.columns(2)
    with col1:
        st.info(f"üìà **–ü–∏–∫–æ–≤—ã–π –º–µ—Å—è—Ü:** {seasonality_data['peak_month']}")
    with col2:
        st.info(f"üìâ **–ù–∏–∑–∫–∏–π –º–µ—Å—è—Ü:** {seasonality_data['low_month']}")

def main():
    st.title("üõçÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    st.markdown("–°–∏—Å—Ç–µ–º–∞ —Å ABC –∞–Ω–∞–ª–∏–∑–æ–º, –∞–ª–µ—Ä—Ç–∞–º–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª", type=['xlsx', 'xls'])
    
    if uploaded_file is None:
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        return
    
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
        df = load_and_process_data(uploaded_file)
    
    if df is None:
        return
    
    st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    with st.sidebar:
        st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
        stores = sorted(df['Magazin'].unique())
        segments = sorted(df['Segment'].unique())
        
        selected_store = st.selectbox("üè™ –ú–∞–≥–∞–∑–∏–Ω:", stores)
        selected_segment = st.selectbox("üìä –°–µ–≥–º–µ–Ω—Ç:", segments)
        
        min_network_qty = st.number_input("–ú–∏–Ω. –ø—Ä–æ–¥–∞–∂–∏ –≤ —Å–µ—Ç–∏:", min_value=1, max_value=100, value=10)
        max_store_qty = st.number_input("–ú–∞–∫—Å. –ø—Ä–æ–¥–∞–∂–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:", min_value=0, max_value=10, value=2)
        
        analyze_btn = st.button("üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True)
    
    if analyze_btn:
        with st.spinner("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
            recommendations = generate_recommendations_with_abc(df, selected_store, selected_segment, min_network_qty, max_store_qty)
            abc_df = calculate_abc_analysis(df, selected_segment)
            seasonality_data = calculate_seasonality(df, selected_segment)
            lifecycle_df = analyze_product_lifecycle(df, selected_segment)
            alerts = generate_alerts(df, selected_store, selected_segment, recommendations)
            
            st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
            display_results(df, selected_store, selected_segment, recommendations, seasonality_data, lifecycle_df, alerts, abc_df)
            
            excel_report = create_excel_report(df, selected_store, selected_segment, recommendations, abc_df, seasonality_data, lifecycle_df, alerts)
            st.download_button(
                label="üìä –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç Excel",
                data=excel_report.getvalue(),
                file_name=f"analysis_report_{selected_store}_{selected_segment}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

if __name__ == "__main__":
    main()
