import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from io import BytesIO
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω—É –ø–µ—Ä–µ—á–µ–Ω—å —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–¥–∞—é—Ç—Å—è,–Ω–æ –µ—â–µ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ", page_icon="üõçÔ∏è", layout="wide")

@st.cache_data
def load_and_process_data(uploaded_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        df = pd.read_excel(uploaded_file)
        required_cols = ['Magazin', 'Datasales', 'Art', 'Describe', 'Model', 'Segment', 'Price', 'Qty', 'Sum']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            return None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
        date_formats = ['%d.%m.%Y', '%d/%m/%Y', '%Y-%m-%d', '%d-%m-%Y', '%d.%m.%y', '%d/%m/%y']
        df['Datasales'] = pd.to_datetime(df['Datasales'], errors='coerce')
        
        if df['Datasales'].isna().all():
            for fmt in date_formats:
                try:
                    df['Datasales'] = pd.to_datetime(df['Datasales'], format=fmt, errors='coerce')
                    if not df['Datasales'].isna().all():
                        break
                except:
                    continue
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = df.dropna(subset=['Art', 'Magazin', 'Segment', 'Datasales'])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        for col in ['Qty', 'Price', 'Sum']:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        df = df[df['Qty'] > 0]  # –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
        df = df[df['Price'] > 0]  # –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
        df = df.drop_duplicates()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        df['Month'] = df['Datasales'].dt.month
        df['Year'] = df['Datasales'].dt.year
        df['Week'] = df['Datasales'].dt.isocalendar().week
        
        return df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def calculate_abc_analysis(df, segment):
    """ABC –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ –º–µ—Ç–æ–¥—É –ü–∞—Ä–µ—Ç–æ"""
    segment_data = df[df['Segment'] == segment].copy()
    
    if segment_data.empty:
        return pd.DataFrame(columns=['Art', 'Revenue', 'ABC', 'Cumulative_Pct'])
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    product_revenue = segment_data.groupby('Art')['Sum'].sum().sort_values(ascending=False)
    
    if product_revenue.empty or product_revenue.sum() == 0:
        return pd.DataFrame(columns=['Art', 'Revenue', 'ABC', 'Cumulative_Pct'])
    
    # –†–∞—Å—á–µ—Ç –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    total_revenue = product_revenue.sum()
    cumulative_revenue = product_revenue.cumsum()
    cumulative_percentage = (cumulative_revenue / total_revenue) * 100
    
    # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ABC
    # A: 0-80% –≤—ã—Ä—É—á–∫–∏, B: 80-95%, C: 95-100%
    abc_categories = []
    for pct in cumulative_percentage:
        if pct <= 80:
            abc_categories.append('A')
        elif pct <= 95:
            abc_categories.append('B')
        else:
            abc_categories.append('C')
    
    abc_df = pd.DataFrame({
        'Art': product_revenue.index,
        'Revenue': product_revenue.values,
        'ABC': abc_categories,
        'Cumulative_Pct': cumulative_percentage.values
    })
    
    return abc_df

def analyze_product_lifecycle(df, segment):
    """–ê–Ω–∞–ª–∏–∑ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    segment_data = df[df['Segment'] == segment].copy()
    
    if segment_data.empty:
        return pd.DataFrame(columns=['Art', 'Describe', 'Total_Sales', 'Months_Active', 'Stage', 'Avg_Monthly_Sales'])
    
    lifecycle_data = []
    
    for art in segment_data['Art'].unique():
        product_data = segment_data[segment_data['Art'] == art].copy()
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_sales = product_data.groupby(['Year', 'Month'])['Qty'].sum().reset_index()
        monthly_sales = monthly_sales.sort_values(['Year', 'Month'])
        
        if len(monthly_sales) == 0:
            continue
        
        total_sales = monthly_sales['Qty'].sum()
        months_active = len(monthly_sales[monthly_sales['Qty'] > 0])
        avg_monthly_sales = total_sales / months_active if months_active > 0 else 0
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        if months_active <= 2:
            stage = '–í–Ω–µ–¥—Ä–µ–Ω–∏–µ'
        elif len(monthly_sales) >= 4:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–µ—Ç–∏ –ø–µ—Ä–∏–æ–¥–∞
            third = len(monthly_sales) // 3
            if third < 1:
                third = 1
            
            early_sales = monthly_sales['Qty'].iloc[:third].mean()
            recent_sales = monthly_sales['Qty'].iloc[-third:].mean()
            std_dev = monthly_sales['Qty'].std()
            mean_sales = monthly_sales['Qty'].mean()
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
            cv = std_dev / mean_sales if mean_sales > 0 else 0
            
            # –†–æ—Å—Ç: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö
            if recent_sales > early_sales * 1.2:
                stage = '–†–æ—Å—Ç'
            # –ó—Ä–µ–ª–æ—Å—Ç—å: —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ (–Ω–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è)
            elif cv < 0.4:
                stage = '–ó—Ä–µ–ª–æ—Å—Ç—å'
            # –°–ø–∞–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∏–∂–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö
            elif recent_sales < early_sales * 0.8:
                stage = '–°–ø–∞–¥'
            else:
                stage = '–ó—Ä–µ–ª–æ—Å—Ç—å'
        else:
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ - –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            if len(monthly_sales) >= 2:
                trend = monthly_sales['Qty'].iloc[-1] - monthly_sales['Qty'].iloc[0]
                if trend > 0:
                    stage = '–†–æ—Å—Ç'
                else:
                    stage = '–ó—Ä–µ–ª–æ—Å—Ç—å'
            else:
                stage = '–í–Ω–µ–¥—Ä–µ–Ω–∏–µ'
        
        lifecycle_data.append({
            'Art': art,
            'Describe': product_data['Describe'].iloc[0],
            'Total_Sales': int(total_sales),
            'Months_Active': months_active,
            'Stage': stage,
            'Avg_Monthly_Sales': round(avg_monthly_sales, 1)
        })
    
    return pd.DataFrame(lifecycle_data)

def generate_alerts(df, store, segment, recommendations):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    alerts = []
    
    if df.empty or df['Datasales'].isna().all():
        return alerts
    
    # –ê–ª–µ—Ä—Ç 1: –¢–æ–≤–∞—Ä—ã —Å —Ä–µ–∑–∫–∏–º –ø–∞–¥–µ–Ω–∏–µ–º –ø—Ä–æ–¥–∞–∂
    max_date = df['Datasales'].max()
    min_date = df['Datasales'].min()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    if (max_date - min_date).days >= 60:
        recent_start = max_date - pd.Timedelta(days=30)
        previous_start = max_date - pd.Timedelta(days=60)
        previous_end = recent_start
        
        recent_data = df[(df['Datasales'] >= recent_start) & 
                        (df['Magazin'] == store) & 
                        (df['Segment'] == segment)]
        
        previous_data = df[(df['Datasales'] >= previous_start) & 
                          (df['Datasales'] < previous_end) &
                          (df['Magazin'] == store) & 
                          (df['Segment'] == segment)]
        
        if not recent_data.empty and not previous_data.empty:
            recent_sales = recent_data.groupby('Art')['Qty'].sum()
            previous_sales = previous_data.groupby('Art')['Qty'].sum()
            
            for art in recent_sales.index:
                if art in previous_sales.index and previous_sales[art] >= 5:  # –ú–∏–Ω–∏–º—É–º 5 –ø—Ä–æ–¥–∞–∂
                    if recent_sales[art] == 0:
                        decline_pct = 100
                    else:
                        decline_pct = ((previous_sales[art] - recent_sales[art]) / previous_sales[art]) * 100
                    
                    if decline_pct >= 50:
                        product_name = df[df['Art'] == art]['Describe'].iloc[0]
                        alerts.append({
                            'type': 'warning',
                            'title': '–ü–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂',
                            'message': f'–¢–æ–≤–∞—Ä "{product_name}" ({art}): –ø–∞–¥–µ–Ω–∏–µ –Ω–∞ {decline_pct:.0f}%',
                            'priority': 'high'
                        })
    
    # –ê–ª–µ—Ä—Ç 2: –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    if not recommendations.empty:
        top_opportunities = recommendations.head(5)
        for _, row in top_opportunities.iterrows():
            if row['Potential_Qty'] >= 10:  # –ó–Ω–∞—á–∏–º—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
                alerts.append({
                    'type': 'success',
                    'title': '–ù–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å',
                    'message': f'"{row["Describe"]}" ({row["Art"]}): –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª {int(row["Potential_Qty"])} —à—Ç/–º–µ—Å',
                    'priority': 'medium'
                })
    
    # –ê–ª–µ—Ä—Ç 3: –ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞
    segment_data = df[df['Segment'] == segment]
    store_data = df[(df['Magazin'] == store) & (df['Segment'] == segment)]
    
    segment_unique = segment_data['Art'].nunique()
    store_unique = store_data['Art'].nunique()
    
    if segment_unique > 0:
        coverage = (store_unique / segment_unique) * 100
        
        if coverage < 20:
            alerts.append({
                'type': 'error',
                'title': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ',
                'message': f'–ü–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞: {coverage:.1f}% (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)',
                'priority': 'high'
            })
        elif coverage < 40:
            alerts.append({
                'type': 'warning',
                'title': '–ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞',
                'message': f'–ü–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞: {coverage:.1f}% (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)',
                'priority': 'medium'
            })
    
    # –ê–ª–µ—Ä—Ç 4: –¢–æ–≤–∞—Ä—ã –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Å–ø–∞–¥–∞
    lifecycle_df = analyze_product_lifecycle(df, segment)
    store_declining = store_data['Art'].unique()
    
    if not lifecycle_df.empty:
        declining_products = lifecycle_df[
            (lifecycle_df['Stage'] == '–°–ø–∞–¥') & 
            (lifecycle_df['Art'].isin(store_declining))
        ]
        
        if len(declining_products) > 0:
            alerts.append({
                'type': 'info',
                'title': '–¢–æ–≤–∞—Ä—ã –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Å–ø–∞–¥–∞',
                'message': f'–í –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ {len(declining_products)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Å–ø–∞–¥–∞',
                'priority': 'low'
            })
    
    return alerts

def calculate_seasonality(df, segment):
    """–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞"""
    segment_data = df[df['Segment'] == segment].copy()
    
    if segment_data.empty:
        month_names = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                       '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
        return {
            'months': month_names,
            'sales': [0] * 12,
            'peak_month': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'low_month': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'seasonality_index': [100] * 12
        }
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_sales = segment_data.groupby('Month')['Qty'].sum().reindex(range(1, 13), fill_value=0)
    
    if monthly_sales.sum() == 0:
        month_names = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                       '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
        return {
            'months': month_names,
            'sales': monthly_sales.values,
            'peak_month': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'low_month': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'seasonality_index': [100] * 12
        }
    
    # –†–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ (—Å—Ä–µ–¥–Ω–µ–µ = 100)
    avg_sales = monthly_sales.mean()
    seasonality_index = (monthly_sales / avg_sales * 100).values if avg_sales > 0 else [100] * 12
    
    peak_month = monthly_sales.idxmax()
    low_month = monthly_sales.idxmin()
    
    month_names = {1:'–Ø–Ω–≤', 2:'–§–µ–≤', 3:'–ú–∞—Ä', 4:'–ê–ø—Ä', 5:'–ú–∞–π', 6:'–ò—é–Ω',
                   7:'–ò—é–ª', 8:'–ê–≤–≥', 9:'–°–µ–Ω', 10:'–û–∫—Ç', 11:'–ù–æ—è', 12:'–î–µ–∫'}
    
    month_labels = [month_names[i] for i in range(1, 13)]
    
    return {
        'months': month_labels,
        'sales': monthly_sales.values,
        'peak_month': month_names[peak_month],
        'low_month': month_names[low_month],
        'seasonality_index': seasonality_index
    }

def generate_recommendations_with_abc(df, store, segment, min_network_qty=10, max_store_qty=2):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å ABC –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ç–∏
    segment_data = df[df['Segment'] == segment].copy()
    
    if segment_data.empty:
        return pd.DataFrame()
    
    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
    network_stats = segment_data.groupby('Art').agg({
        'Qty': 'sum',
        'Sum': 'sum',
        'Price': 'mean',
        'Describe': 'first',
        'Model': 'first',
        'Magazin': 'nunique'
    }).reset_index()
    
    network_stats.columns = ['Art', 'Total_Qty', 'Total_Sum', 'Avg_Price', 'Describe', 'Model', 'Store_Count']
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É
    store_data = df[(df['Magazin'] == store) & (df['Segment'] == segment)].copy()
    
    if store_data.empty:
        store_stats = pd.DataFrame(columns=['Art', 'Store_Qty'])
    else:
        store_stats = store_data.groupby('Art')['Qty'].sum().reset_index()
        store_stats.columns = ['Art', 'Store_Qty']
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    merged = network_stats.merge(store_stats, on='Art', how='left')
    merged['Store_Qty'] = merged['Store_Qty'].fillna(0)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    filtered = merged[
        (merged['Total_Qty'] >= min_network_qty) &
        (merged['Store_Qty'] <= max_store_qty) &
        (merged['Store_Count'] > 0)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    ].copy()
    
    if filtered.empty:
        return pd.DataFrame()
    
    # ABC –∞–Ω–∞–ª–∏–∑
    abc_df = calculate_abc_analysis(df, segment)
    
    if not abc_df.empty and 'Art' in abc_df.columns and 'ABC' in abc_df.columns:
        filtered = filtered.merge(abc_df[['Art', 'ABC']], on='Art', how='left')
        filtered['ABC'] = filtered['ABC'].fillna('C')
    else:
        filtered['ABC'] = 'N/A'
    
    # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ (—Å—Ä–µ–¥–Ω–µ–µ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º —Å–µ—Ç–∏)
    filtered['Potential_Qty'] = (filtered['Total_Qty'] / filtered['Store_Count']).round(1)
    filtered['Potential_Sum'] = (filtered['Potential_Qty'] * filtered['Avg_Price']).round(2)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ ABC
    abc_priority = {'A': 3, 'B': 2, 'C': 1, 'N/A': 0}
    filtered['Priority'] = filtered['ABC'].map(abc_priority).fillna(0)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ABC, –∑–∞—Ç–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
    filtered = filtered.sort_values(['Priority', 'Potential_Qty'], ascending=[False, False])
    
    return filtered

def create_statistics_table(df, store, segment, recommendations, abc_df, lifecycle_df):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    segment_data = df[df['Segment'] == segment]
    store_data = df[(df['Magazin'] == store) & (df['Segment'] == segment)]
    
    stats = []
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    segment_unique = segment_data['Art'].nunique()
    store_unique = store_data['Art'].nunique()
    coverage = (store_unique / segment_unique * 100) if segment_unique > 0 else 0
    
    stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ', 
                  '–ó–Ω–∞—á–µ–Ω–∏–µ': segment_unique})
    stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–¢–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ', 
                  '–ó–Ω–∞—á–µ–Ω–∏–µ': store_unique})
    stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–ü–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞', 
                  '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{coverage:.1f}%"})
    
    # –ü—Ä–æ–¥–∞–∂–∏
    total_segment_sales = segment_data['Qty'].sum()
    total_store_sales = store_data['Qty'].sum()
    segment_revenue = segment_data['Sum'].sum()
    store_revenue = store_data['Sum'].sum()
    
    stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ü—Ä–æ–¥–∞–∂–∏', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–ü—Ä–æ–¥–∞–∂–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ (—à—Ç)', 
                  '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{int(total_segment_sales):,}"})
    stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ü—Ä–æ–¥–∞–∂–∏', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞ (—à—Ç)', 
                  '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{int(total_store_sales):,}"})
    stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ü—Ä–æ–¥–∞–∂–∏', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–í—ã—Ä—É—á–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ (–≥—Ä–Ω)', 
                  '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{segment_revenue:,.0f}"})
    stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ü—Ä–æ–¥–∞–∂–∏', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–í—ã—Ä—É—á–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ (–≥—Ä–Ω)', 
                  '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{store_revenue:,.0f}"})
    
    # ABC –∞–Ω–∞–ª–∏–∑
    if not abc_df.empty:
        for category in ['A', 'B', 'C']:
            count = len(abc_df[abc_df['ABC'] == category])
            revenue = abc_df[abc_df['ABC'] == category]['Revenue'].sum()
            stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': 'ABC –ê–Ω–∞–ª–∏–∑', 
                         '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} (—Ç–æ–≤–∞—Ä–æ–≤)', 
                         '–ó–Ω–∞—á–µ–Ω–∏–µ': count})
            stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': 'ABC –ê–Ω–∞–ª–∏–∑', 
                         '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} (–≤—ã—Ä—É—á–∫–∞)', 
                         '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{revenue:,.0f} –≥—Ä–Ω"})
    
    # –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
    if not lifecycle_df.empty:
        for stage in ['–í–Ω–µ–¥—Ä–µ–Ω–∏–µ', '–†–æ—Å—Ç', '–ó—Ä–µ–ª–æ—Å—Ç—å', '–°–ø–∞–¥']:
            count = len(lifecycle_df[lifecycle_df['Stage'] == stage])
            if count > 0:
                stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª', 
                             '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': stage, 
                             '–ó–Ω–∞—á–µ–Ω–∏–µ': count})
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if not recommendations.empty:
        stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 
                     '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–¢–æ–≤–∞—Ä–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ', 
                     '–ó–Ω–∞—á–µ–Ω–∏–µ': len(recommendations)})
        stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 
                     '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–æ–¥–∞–∂ (—à—Ç/–º–µ—Å)', 
                     '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{recommendations['Potential_Qty'].sum():.0f}"})
        stats.append({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 
                     '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ (–≥—Ä–Ω/–º–µ—Å)', 
                     '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{recommendations['Potential_Sum'].sum():,.0f}"})
    
    return pd.DataFrame(stats)

def create_excel_report(df, store, segment, recommendations, abc_df, seasonality_data, lifecycle_df, alerts):
    """–°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞"""
    output = BytesIO()
    
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # –õ–∏—Å—Ç 1: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not recommendations.empty:
            rec_export = recommendations[['Art', 'Describe', 'Model', 'Avg_Price', 'Total_Qty', 
                                         'Store_Qty', 'Potential_Qty', 'Potential_Sum', 
                                         'Store_Count', 'ABC']].copy()
            rec_export.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ú–æ–¥–µ–ª—å', '–¶–µ–Ω–∞', '–ü—Ä–æ–¥–∞–∂–∏ —Å–µ—Ç–∏', 
                                 '–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞', '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª (—à—Ç)', '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª (–≥—Ä–Ω)', 
                                 '–ú–∞–≥–∞–∑–∏–Ω–æ–≤', 'ABC']
            rec_export.to_excel(writer, sheet_name='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', index=False)
        
        # –õ–∏—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_table = create_statistics_table(df, store, segment, recommendations, abc_df, lifecycle_df)
        stats_table.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
        
        # –õ–∏—Å—Ç 3: ABC –∞–Ω–∞–ª–∏–∑
        if not abc_df.empty:
            abc_export = abc_df.copy()
            abc_export.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–í—ã—Ä—É—á–∫–∞', 'ABC', '–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π %']
            abc_export.to_excel(writer, sheet_name='ABC –ê–Ω–∞–ª–∏–∑', index=False)
        
        # –õ–∏—Å—Ç 4: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
        if not lifecycle_df.empty:
            lifecycle_export = lifecycle_df.copy()
            lifecycle_export.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–û–ø–∏—Å–∞–Ω–∏–µ', '–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂', 
                                       '–ú–µ—Å—è—Ü–µ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–°—Ç–∞–¥–∏—è', '–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–º–µ—Å']
            lifecycle_export.to_excel(writer, sheet_name='–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª', index=False)
        
        # –õ–∏—Å—Ç 5: –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        season_df = pd.DataFrame({
            '–ú–µ—Å—è—Ü': seasonality_data['months'],
            '–ü—Ä–æ–¥–∞–∂–∏': seasonality_data['sales'],
            '–ò–Ω–¥–µ–∫—Å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏': seasonality_data['seasonality_index']
        })
        season_df.to_excel(writer, sheet_name='–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', index=False)
        
        # –õ–∏—Å—Ç 6: –ê–ª–µ—Ä—Ç—ã
        if alerts:
            alerts_df = pd.DataFrame(alerts)
            alerts_df.to_excel(writer, sheet_name='–ê–ª–µ—Ä—Ç—ã', index=False)
    
    output.seek(0)
    return output

def display_alerts(alerts):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤"""
    if not alerts:
        return
    
    st.subheader("üö® –ê–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    priority_order = {'high': 0, 'medium': 1, 'low': 2}
    sorted_alerts = sorted(alerts, key=lambda x: priority_order.get(x.get('priority', 'low'), 2))
    
    for alert in sorted_alerts:
        alert_type = alert.get('type', 'info')
        title = alert.get('title', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
        message = alert.get('message', '')
        
        if alert_type == 'error':
            st.error(f"**{title}**: {message}")
        elif alert_type == 'warning':
            st.warning(f"**{title}**: {message}")
        elif alert_type == 'success':
            st.success(f"**{title}**: {message}")
        else:
            st.info(f"**{title}**: {message}")

def display_results(df, store, segment, recommendations, seasonality_data, lifecycle_df, alerts, abc_df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    # –ê–ª–µ—Ä—Ç—ã
    if alerts:
        display_alerts(alerts)
        st.divider()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö
    segment_data = df[df['Segment'] == segment]
    store_data = df[(df['Magazin'] == store) & (df['Segment'] == segment)]
    
    segment_unique = segment_data['Art'].nunique()
    store_unique = store_data['Art'].nunique()
    coverage = (store_unique / segment_unique * 100) if segment_unique > 0 else 0
    
    avg_sales_network = segment_data.groupby('Art')['Qty'].sum().mean() if not segment_data.empty else 0
    avg_price = segment_data['Price'].mean() if not segment_data.empty else 0
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–¢–æ–≤–∞—Ä–æ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ", segment_unique)
    with col2:
        st.metric("–¢–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", store_unique)
    with col3:
        st.metric("–ü–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞", f"{coverage:.1f}%")
    with col4:
        st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{avg_price:.0f} –≥—Ä–Ω")
    
    st.divider()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    
    if not recommendations.empty:
        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        col1, col2 = st.columns(2)
        with col1:
            abc_filter = st.multiselect(
                "–§–∏–ª—å—Ç—Ä –ø–æ ABC",
                options=['A', 'B', 'C', 'N/A'],
                default=['A', 'B', 'C']
            )
        with col2:
            min_potential = st.slider(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª (—à—Ç)",
                min_value=0,
                max_value=int(recommendations['Potential_Qty'].max()),
                value=0
            )
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filtered_rec = recommendations[
            (recommendations['ABC'].isin(abc_filter)) &
            (recommendations['Potential_Qty'] >= min_potential)
        ].copy()
        
        if not filtered_rec.empty:
            display_df = filtered_rec[['Art', 'Describe', 'Model', 'Avg_Price', 'Total_Qty', 
                                      'Store_Qty', 'Potential_Qty', 'Store_Count', 'ABC']].copy()
            display_df.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ú–æ–¥–µ–ª—å', '–¶–µ–Ω–∞ (–≥—Ä–Ω)', '–ü—Ä–æ–¥–∞–∂–∏ —Å–µ—Ç–∏', 
                                 '–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞', '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª (—à—Ç/–º–µ—Å)', '–ú–∞–≥–∞–∑–∏–Ω–æ–≤', 'ABC']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            display_df['–¶–µ–Ω–∞ (–≥—Ä–Ω)'] = display_df['–¶–µ–Ω–∞ (–≥—Ä–Ω)'].apply(lambda x: f"{x:.2f}")
            display_df['–ü—Ä–æ–¥–∞–∂–∏ —Å–µ—Ç–∏'] = display_df['–ü—Ä–æ–¥–∞–∂–∏ —Å–µ—Ç–∏'].apply(lambda x: f"{int(x):,}")
            display_df['–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞'] = display_df['–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞'].apply(lambda x: f"{int(x):,}")
            display_df['–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª (—à—Ç/–º–µ—Å)'] = display_df['–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª (—à—Ç/–º–µ—Å)'].apply(lambda x: f"{x:.1f}")
            
            # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ ABC
            def color_abc(val):
                colors = {
                    'A': 'background-color: #90EE90',
                    'B': 'background-color: #FFE4B5',
                    'C': 'background-color: #FFB6C1',
                    'N/A': 'background-color: #E0E0E0'
                }
                return colors.get(val, '')
            
            styled_df = display_df.style.applymap(color_abc, subset=['ABC'])
            st.dataframe(styled_df, use_container_width=True, height=400)
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤", len(filtered_rec))
            with col2:
                st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª (—à—Ç/–º–µ—Å)", f"{filtered_rec['Potential_Qty'].sum():.0f}")
            with col3:
                st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª (–≥—Ä–Ω/–º–µ—Å)", f"{filtered_rec['Potential_Sum'].sum():,.0f}")
        else:
            st.info("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
    else:
        st.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
    
    st.divider()
    
    # ABC –∞–Ω–∞–ª–∏–∑
    st.subheader("üìä ABC –ê–Ω–∞–ª–∏–∑ —Å–µ–≥–º–µ–Ω—Ç–∞")
    
    if not abc_df.empty:
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ ABC
            abc_counts = abc_df['ABC'].value_counts().reindex(['A', 'B', 'C'], fill_value=0)
            fig_abc = px.pie(
                values=abc_counts.values,
                names=abc_counts.index,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ABC",
                color=abc_counts.index,
                color_discrete_map={'A': '#90EE90', 'B': '#FFE4B5', 'C': '#FFB6C1'}
            )
            st.plotly_chart(fig_abc, use_container_width=True)
        
        with col2:
            st.markdown("**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ABC:**")
            for category in ['A', 'B', 'C']:
                count = len(abc_df[abc_df['ABC'] == category])
                revenue = abc_df[abc_df['ABC'] == category]['Revenue'].sum()
                pct = (revenue / abc_df['Revenue'].sum() * 100) if abc_df['Revenue'].sum() > 0 else 0
                st.metric(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}", f"{count} —Ç–æ–≤–∞—Ä–æ–≤", f"{pct:.1f}% –≤—ã—Ä—É—á–∫–∏")
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ABC –∞–Ω–∞–ª–∏–∑–∞")
    
    st.divider()
    
    # –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
    st.subheader("üîÑ –ê–Ω–∞–ª–∏–∑ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    
    if not lifecycle_df.empty:
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å—Ç–∞–¥–∏—è–º
        stage_summary = lifecycle_df['Stage'].value_counts()
        col1, col2, col3, col4 = st.columns(4)
        
        stages = ['–í–Ω–µ–¥—Ä–µ–Ω–∏–µ', '–†–æ—Å—Ç', '–ó—Ä–µ–ª–æ—Å—Ç—å', '–°–ø–∞–¥']
        icons = ['üöÄ', 'üìà', '‚öñÔ∏è', 'üìâ']
        cols = [col1, col2, col3, col4]
        
        for i, (stage, icon) in enumerate(zip(stages, icons)):
            with cols[i]:
                count = stage_summary.get(stage, 0)
                st.metric(f"{icon} {stage}", count)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        fig_lifecycle = px.pie(
            values=stage_summary.values,
            names=stage_summary.index,
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—Ç–∞–¥–∏—è–º –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"
        )
        st.plotly_chart(fig_lifecycle, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        with st.expander("üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º"):
            lifecycle_display = lifecycle_df[['Art', 'Describe', 'Stage', 'Total_Sales', 
                                             'Months_Active', 'Avg_Monthly_Sales']].copy()
            lifecycle_display.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°—Ç–∞–¥–∏—è', '–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂', 
                                        '–ú–µ—Å—è—Ü–µ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–º–µ—Å']
            st.dataframe(lifecycle_display, use_container_width=True)
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
    
    st.divider()
    
    # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
    st.subheader("üìÖ –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂")
    
    if seasonality_data['peak_month'] != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º
        fig_season = go.Figure()
        
        fig_season.add_trace(go.Scatter(
            x=seasonality_data['months'],
            y=seasonality_data['sales'],
            mode='lines+markers',
            name='–ü—Ä–æ–¥–∞–∂–∏',
            line=dict(color='#1f77b4', width=3),
            marker=dict(size=8)
        ))
        
        fig_season.update_layout(
            title="–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ",
            xaxis_title="–ú–µ—Å—è—Ü",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂",
            hovermode='x unified'
        )
        
        st.plotly_chart(fig_season, use_container_width=True)
        
        # –ò–Ω–¥–µ–∫—Å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
        fig_index = go.Figure()
        
        fig_index.add_trace(go.Bar(
            x=seasonality_data['months'],
            y=seasonality_data['seasonality_index'],
            marker_color=['#90EE90' if x >= 100 else '#FFB6C1' for x in seasonality_data['seasonality_index']],
            text=[f"{x:.0f}" for x in seasonality_data['seasonality_index']],
            textposition='outside'
        ))
        
        fig_index.add_hline(y=100, line_dash="dash", line_color="gray", 
                           annotation_text="–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        
        fig_index.update_layout(
            title="–ò–Ω–¥–µ–∫—Å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ (—Å—Ä–µ–¥–Ω–µ–µ = 100)",
            xaxis_title="–ú–µ—Å—è—Ü",
            yaxis_title="–ò–Ω–¥–µ–∫—Å",
            showlegend=False
        )
        
        st.plotly_chart(fig_index, use_container_width=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏–∫–∞—Ö
        col1, col2 = st.columns(2)
        with col1:
            peak_value = seasonality_data['sales'][seasonality_data['months'].index(seasonality_data['peak_month'])]
            st.success(f"üìà **–ü–∏–∫–æ–≤—ã–π –º–µ—Å—è—Ü:** {seasonality_data['peak_month']} ({int(peak_value)} —à—Ç)")
        with col2:
            low_value = seasonality_data['sales'][seasonality_data['months'].index(seasonality_data['low_month'])]
            st.info(f"üìâ **–ù–∏–∑–∫–∏–π –º–µ—Å—è—Ü:** {seasonality_data['low_month']} ({int(low_value)} —à—Ç)")
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏")
    
    st.divider()
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    stats_table = create_statistics_table(df, store, segment, recommendations, abc_df, lifecycle_df)
    
    if not stats_table.empty:
        categories = stats_table['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique().tolist()
        
        if len(categories) > 0:
            tabs = st.tabs(categories)
            
            for i, category in enumerate(categories):
                with tabs[i]:
                    category_data = stats_table[stats_table['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category]
                    category_display = category_data[['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ']].copy()
                    
                    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                    st.dataframe(
                        category_display,
                        use_container_width=True,
                        hide_index=True,
                        column_config={
                            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": st.column_config.TextColumn("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", width="medium"),
                            "–ó–Ω–∞—á–µ–Ω–∏–µ": st.column_config.TextColumn("–ó–Ω–∞—á–µ–Ω–∏–µ", width="medium")
                        }
                    )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üõçÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    st.markdown("""
    –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
    - **ABC –∞–Ω–∞–ª–∏–∑** - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –≤—ã—Ä—É—á–∫–µ
    - **–ê–Ω–∞–ª–∏–∑ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞** - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ —Ç–æ–≤–∞—Ä–∞
    - **–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏** - –≤—ã—è–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    - **–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã** - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
    """)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö",
        type=['xlsx', 'xls'],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: Magazin, Datasales, Art, Describe, Model, Segment, Price, Qty, Sum"
    )
    
    if uploaded_file is None:
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        with st.expander("‚ÑπÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–Ω—ã—Ö"):
            st.markdown("""
            **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:**
            - `Magazin` - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
            - `Datasales` - –¥–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏
            - `Art` - –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
            - `Describe` - –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            - `Model` - –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞
            - `Segment` - —Å–µ–≥–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞
            - `Price` - —Ü–µ–Ω–∞
            - `Qty` - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            - `Sum` - —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏
            
            **–§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç:** DD.MM.YYYY, DD/MM/YYYY, YYYY-MM-DD
            """)
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.spinner("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
        df = load_and_process_data(uploaded_file)
    
    if df is None:
        return
    
    st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df):,} –∑–∞–ø–∏—Å–µ–π")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
    with st.expander("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("–ó–∞–ø–∏—Å–µ–π", f"{len(df):,}")
        with col2:
            st.metric("–ú–∞–≥–∞–∑–∏–Ω–æ–≤", df['Magazin'].nunique())
        with col3:
            st.metric("–¢–æ–≤–∞—Ä–æ–≤", df['Art'].nunique())
        with col4:
            st.metric("–°–µ–≥–º–µ–Ω—Ç–æ–≤", df['Segment'].nunique())
        
        date_range = f"{df['Datasales'].min().strftime('%d.%m.%Y')} - {df['Datasales'].max().strftime('%d.%m.%Y')}"
        st.info(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {date_range}")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        # –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å–µ–≥–º–µ–Ω—Ç–∞
        stores = sorted(df['Magazin'].unique())
        segments = sorted(df['Segment'].unique())
        
        selected_store = st.selectbox(
            "üè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:",
            stores,
            help="–ú–∞–≥–∞–∑–∏–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
        
        selected_segment = st.selectbox(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç:",
            segments,
            help="–°–µ–≥–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤"
        )
        
        st.divider()
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        st.subheader("üéØ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        min_network_qty = st.number_input(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ —Å–µ—Ç–∏:",
            min_value=1,
            max_value=1000,
            value=10,
            step=5,
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–µ—Ç–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        )
        
        max_store_qty = st.number_input(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:",
            min_value=0,
            max_value=100,
            value=2,
            step=1,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (0 = —Ç–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
        )
        
        st.divider()
        
        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        analyze_btn = st.button(
            "üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
            type="primary",
            use_container_width=True
        )
    
    # –ê–Ω–∞–ª–∏–∑
    if analyze_btn:
        with st.spinner("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
            try:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                recommendations = generate_recommendations_with_abc(
                    df, selected_store, selected_segment, min_network_qty, max_store_qty
                )
                
                # ABC –∞–Ω–∞–ª–∏–∑
                abc_df = calculate_abc_analysis(df, selected_segment)
                
                # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
                seasonality_data = calculate_seasonality(df, selected_segment)
                
                # –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
                lifecycle_df = analyze_product_lifecycle(df, selected_segment)
                
                # –ê–ª–µ—Ä—Ç—ã
                alerts = generate_alerts(df, selected_store, selected_segment, recommendations)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                st.divider()
                
                display_results(
                    df, selected_store, selected_segment, 
                    recommendations, seasonality_data, 
                    lifecycle_df, alerts, abc_df
                )
                
                # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
                st.divider()
                st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞")
                
                excel_report = create_excel_report(
                    df, selected_store, selected_segment,
                    recommendations, abc_df, seasonality_data,
                    lifecycle_df, alerts
                )
                
                filename = f"analysis_report_{selected_store}_{selected_segment}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                
                st.download_button(
                    label="üìä –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç Excel",
                    data=excel_report.getvalue(),
                    file_name=filename,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
                st.exception(e)

if __name__ == "__main__":
    main()

