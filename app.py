import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤",
    page_icon="üõçÔ∏è",
    layout="wide"
)

@st.cache_data
def load_and_process_data(uploaded_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel"""
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_excel(uploaded_file)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_cols = ['Magazin', 'Datasales', 'Art', 'Describe', 'Model', 'Segment', 'Price', 'Qty', 'Sum']
        missing_cols = [col for col in required_cols if col not in df.columns]
        if missing_cols:
            st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            return None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞
        df['Datasales'] = parse_dates(df['Datasales'])
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = df.dropna(subset=['Art', 'Magazin', 'Segment'])
        df['Qty'] = pd.to_numeric(df['Qty'], errors='coerce').fillna(0)
        df['Price'] = pd.to_numeric(df['Price'], errors='coerce').fillna(0)
        df['Sum'] = pd.to_numeric(df['Sum'], errors='coerce').fillna(0)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        df = df.drop_duplicates()
        
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def parse_dates(date_series):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç"""
    date_formats = ['%d.%m.%Y', '%d/%m/%Y', '%Y-%m-%d', '%d-%m-%Y', '%d.%m.%y', '%d/%m/%y']
    
    for fmt in date_formats:
        try:
            return pd.to_datetime(date_series, format=fmt, errors='coerce')
        except:
            continue
    
    # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –ø–æ–¥–æ—à–ª–∏
    return pd.to_datetime(date_series, infer_datetime_format=True, errors='coerce')

def calculate_network_stats(df, segment):
    """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –ø–æ —Å–µ—Ç–∏ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞"""
    segment_data = df[df['Segment'] == segment].copy()
    
    network_stats = segment_data.groupby('Art').agg({
        'Qty': ['sum', 'count'],
        'Sum': 'sum',
        'Price': 'mean',
        'Describe': 'first',
        'Model': 'first',
        'Magazin': 'nunique'
    }).reset_index()
    
    # –£–ø—Ä–æ—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
    network_stats.columns = ['Art', 'Total_Qty', 'Sales_Count', 'Total_Sum', 'Avg_Price', 'Describe', 'Model', 'Store_Count']
    
    return network_stats

def generate_recommendations(df, store, segment, min_network_qty=10, max_store_qty=2):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å–µ–≥–º–µ–Ω—Ç–∞"""
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–µ—Ç–∏
    network_stats = calculate_network_stats(df, segment)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ö–æ—Ä–æ—à–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏ –≤ —Å–µ—Ç–∏
    good_network_products = network_stats[
        (network_stats['Total_Qty'] >= min_network_qty) & 
        (network_stats['Store_Count'] >= 2)
    ].copy()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ
    store_data = df[(df['Magazin'] == store) & (df['Segment'] == segment)].copy()
    store_sales = store_data.groupby('Art')['Qty'].sum().reset_index()
    store_sales.columns = ['Art', 'Store_Qty']
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    recommendations = good_network_products.merge(store_sales, on='Art', how='left')
    recommendations['Store_Qty'] = recommendations['Store_Qty'].fillna(0)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    recommendations = recommendations[recommendations['Store_Qty'] <= max_store_qty].copy()
    
    # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    recommendations['Potential_Qty'] = recommendations['Total_Qty'] - recommendations['Store_Qty']
    recommendations['Potential_Sum'] = recommendations['Potential_Qty'] * recommendations['Avg_Price']
    recommendations['Priority_Score'] = (
        recommendations['Potential_Qty'] * 0.4 + 
        recommendations['Store_Count'] * 0.3 + 
        (recommendations['Total_Sum'] / recommendations['Total_Sum'].max()) * 100 * 0.3
    )
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    recommendations = recommendations.sort_values('Priority_Score', ascending=False)
    
    return recommendations

def display_statistics(df, store, segment):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    segment_data = df[df['Segment'] == segment]
    store_data = df[(df['Magazin'] == store) & (df['Segment'] == segment)]
    
    total_products = segment_data['Art'].nunique()
    store_products = store_data['Art'].nunique()
    coverage = (store_products / total_products * 100) if total_products > 0 else 0
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–¢–æ–≤–∞—Ä–æ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ", total_products)
    with col2:
        st.metric("–¢–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", store_products)
    with col3:
        st.metric("–ü–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞", f"{coverage:.1f}%")
    with col4:
        avg_network_qty = segment_data.groupby('Art')['Qty'].sum().mean()
        st.metric("–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ —Å–µ—Ç–∏", f"{avg_network_qty:.1f} —à—Ç")

def display_recommendations_table(recommendations):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    if recommendations.empty:
        st.warning("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        return
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_df = recommendations[['Art', 'Describe', 'Model', 'Avg_Price', 'Total_Qty', 'Store_Qty', 'Potential_Qty', 'Store_Count']].copy()
    display_df.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ú–æ–¥–µ–ª—å', '–¶–µ–Ω–∞', '–ü—Ä–æ–¥–∞–∂–∏ —Å–µ—Ç–∏', '–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞', '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª', '–ú–∞–≥–∞–∑–∏–Ω–æ–≤']
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    display_df['–¶–µ–Ω–∞'] = display_df['–¶–µ–Ω–∞'].round(2)
    display_df['–ü—Ä–æ–¥–∞–∂–∏ —Å–µ—Ç–∏'] = display_df['–ü—Ä–æ–¥–∞–∂–∏ —Å–µ—Ç–∏'].astype(int)
    display_df['–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞'] = display_df['–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞'].astype(int)
    display_df['–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª'] = display_df['–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª'].astype(int)
    display_df['–ú–∞–≥–∞–∑–∏–Ω–æ–≤'] = display_df['–ú–∞–≥–∞–∑–∏–Ω–æ–≤'].astype(int)
    
    st.dataframe(display_df, use_container_width=True, height=400)

def display_top_network_products(df, segment, limit=10):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ —Å–µ—Ç–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ"""
    network_stats = calculate_network_stats(df, segment)
    top_products = network_stats.nlargest(limit, 'Total_Qty')[['Art', 'Describe', 'Total_Qty', 'Avg_Price', 'Store_Count']]
    
    top_products.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ü—Ä–æ–¥–∞–∂–∏', '–¶–µ–Ω–∞', '–ú–∞–≥–∞–∑–∏–Ω–æ–≤']
    top_products['–ü—Ä–æ–¥–∞–∂–∏'] = top_products['–ü—Ä–æ–¥–∞–∂–∏'].astype(int)
    top_products['–¶–µ–Ω–∞'] = top_products['–¶–µ–Ω–∞'].round(2)
    top_products['–ú–∞–≥–∞–∑–∏–Ω–æ–≤'] = top_products['–ú–∞–≥–∞–∑–∏–Ω–æ–≤'].astype(int)
    
    st.subheader(f"–¢–æ–ø-{limit} —Ç–æ–≤–∞—Ä–æ–≤ —Å–µ—Ç–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ")
    st.dataframe(top_products, use_container_width=True)

def generate_analysis_comments(df, store, segment, recommendations):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    comments = []
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    segment_data = df[df['Segment'] == segment]
    store_data = df[(df['Magazin'] == store) & (df['Segment'] == segment)]
    
    total_products = segment_data['Art'].nunique()
    store_products = store_data['Art'].nunique()
    coverage = (store_products / total_products * 100) if total_products > 0 else 0
    
    comments.append(f"## üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ '{store}' –≤ —Å–µ–≥–º–µ–Ω—Ç–µ '{segment}'")
    comments.append(f"")
    comments.append(f"### –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    comments.append(f"- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ:** {total_products}")
    comments.append(f"- **–¢–æ–≤–∞—Ä–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:** {store_products}")
    comments.append(f"- **–ü–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞:** {coverage:.1f}%")
    
    if not recommendations.empty:
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        total_potential_qty = recommendations['Potential_Qty'].sum()
        total_potential_revenue = recommendations['Potential_Sum'].sum()
        avg_priority = recommendations['Priority_Score'].mean()
        top_recommendation = recommendations.iloc[0]
        
        comments.append(f"")
        comments.append(f"### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:")
        comments.append(f"- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:** {len(recommendations)}")
        comments.append(f"- **–û–±—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–æ–¥–∞–∂:** {int(total_potential_qty)} —à—Ç—É–∫")
        comments.append(f"- **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞:** {total_potential_revenue:,.0f} –≥—Ä–Ω")
        comments.append(f"- **–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –±–∞–ª–ª:** {avg_priority:.1f}")
        
        comments.append(f"")
        comments.append(f"### –¢–æ–ø-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
        comments.append(f"- **–ê—Ä—Ç–∏–∫—É–ª:** {top_recommendation['Art']}")
        comments.append(f"- **–û–ø–∏—Å–∞–Ω–∏–µ:** {top_recommendation['Describe']}")
        comments.append(f"- **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–æ–¥–∞–∂:** {int(top_recommendation['Potential_Qty'])} —à—Ç—É–∫")
        comments.append(f"- **–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:** {top_recommendation['Avg_Price']:.2f} –≥—Ä–Ω")
        comments.append(f"- **–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö:** {int(top_recommendation['Store_Count'])}")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        high_priority = recommendations[recommendations['Priority_Score'] >= 75]
        medium_priority = recommendations[(recommendations['Priority_Score'] >= 50) & (recommendations['Priority_Score'] < 75)]
        low_priority = recommendations[recommendations['Priority_Score'] < 50]
        
        comments.append(f"")
        comments.append(f"### –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
        comments.append(f"- **–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (‚â•75 –±–∞–ª–ª–æ–≤):** {len(high_priority)} —Ç–æ–≤–∞—Ä–æ–≤")
        comments.append(f"- **–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (50-74 –±–∞–ª–ª–∞):** {len(medium_priority)} —Ç–æ–≤–∞—Ä–æ–≤")
        comments.append(f"- **–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (<50 –±–∞–ª–ª–æ–≤):** {len(low_priority)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ü–µ–Ω–æ–≤—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
        price_ranges = pd.cut(recommendations['Avg_Price'], bins=3, labels=['–ù–∏–∑–∫–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–í—ã—Å–æ–∫–∞—è'])
        price_analysis = price_ranges.value_counts()
        
        comments.append(f"")
        comments.append(f"### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–æ–≤—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º:")
        for price_range, count in price_analysis.items():
            comments.append(f"- **{price_range} —Ü–µ–Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:** {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é
        comments.append(f"")
        comments.append(f"### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é:")
        
        if coverage < 30:
            comments.append(f"- **–ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ ({coverage:.1f}%)** - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
        elif coverage < 60:
            comments.append(f"- **–°—Ä–µ–¥–Ω–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ ({coverage:.1f}%)** - –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞")
        else:
            comments.append(f"- **–í—ã—Å–æ–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ ({coverage:.1f}%)** - —Ñ–æ–∫—É—Å –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π")
        
        if len(high_priority) > 0:
            comments.append(f"- **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ {len(high_priority)} —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞** - –æ–Ω–∏ –∏–º–µ—é—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª")
        
        if total_potential_revenue > 50000:
            comments.append(f"- **–í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ –≤—ã—Ä—É—á–∫–∏** - –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏")
        
        comments.append(f"- **–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ** - –Ω–∞—á–Ω–∏—Ç–µ —Å —Ç–æ–ø-5 –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        comments.append(f"- **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏** - —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        
    else:
        comments.append(f"")
        comments.append(f"### ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        comments.append(f"- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        comments.append(f"- –£–º–µ–Ω—å—à–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ —Å–µ—Ç–∏")
        comments.append(f"- –£–≤–µ–ª–∏—á—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
    
    return "\n".join(comments)

def main():
    st.title("üõçÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    st.markdown("–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç–æ–≤–∞—Ä—ã —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö", 
        type=['xlsx', 'xls'],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: Magazin, Datasales, Art, Describe, Model, Segment, Price, Qty, Sum"
    )
    
    if uploaded_file is None:
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
        df = load_and_process_data(uploaded_file)
    
    if df is None:
        return
    
    st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
        # –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å–µ–≥–º–µ–Ω—Ç–∞
        stores = sorted(df['Magazin'].unique())
        segments = sorted(df['Segment'].unique())
        
        selected_store = st.selectbox("üè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", stores)
        selected_segment = st.selectbox("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç:", segments)
        
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        min_network_qty = st.number_input(
            "–ú–∏–Ω. –ø—Ä–æ–¥–∞–∂–∏ –≤ —Å–µ—Ç–∏ (—à—Ç):", 
            min_value=1, max_value=100, value=10,
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–µ—Ç–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        )
        
        max_store_qty = st.number_input(
            "–ú–∞–∫—Å. –ø—Ä–æ–¥–∞–∂–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (—à—Ç):", 
            min_value=0, max_value=10, value=2,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (–ø–æ—Ä–æ–≥ '—Ä–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂')"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        generate_btn = st.button("üéØ –°–¥–µ–ª–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é", type="primary", use_container_width=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if generate_btn:
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π..."):
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.subheader("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            display_statistics(df, selected_store, selected_segment)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations = generate_recommendations(
                df, selected_store, selected_segment, 
                min_network_qty, max_store_qty
            )
            
            st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
            st.markdown(f"**–ú–∞–≥–∞–∑–∏–Ω:** {selected_store} | **–°–µ–≥–º–µ–Ω—Ç:** {selected_segment}")
            
            if not recommendations.empty:
                st.markdown(f"–ù–∞–π–¥–µ–Ω–æ **{len(recommendations)}** —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                display_recommendations_table(recommendations)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                col1, col2 = st.columns(2)
                
                with col1:
                    total_potential = recommendations['Potential_Qty'].sum()
                    st.metric("–û–±—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª (—à—Ç)", int(total_potential))
                
                with col2:
                    potential_revenue = recommendations['Potential_Sum'].sum()
                    st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞", f"{potential_revenue:,.0f} –≥—Ä–Ω")
                
                # –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ —Å–µ—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                with st.expander("üìä –¢–æ–ø —Ç–æ–≤–∞—Ä—ã —Å–µ—Ç–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ", expanded=False):
                    display_top_network_products(df, selected_segment)
                
                # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                csv = recommendations.to_csv(index=False, encoding='utf-8-sig')
                st.download_button(
                    label="üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (CSV)",
                    data=csv,
                    file_name=f"recommendations_{selected_store}_{selected_segment}.csv",
                    mime="text/csv"
                )
            else:
                st.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            st.subheader("üí¨ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
            analysis_comments = generate_analysis_comments(df, selected_store, selected_segment, recommendations)
            st.markdown(analysis_comments)
            
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
            st.download_button(
                label="üìÑ –°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç",
                data=analysis_comments,
                file_name=f"analysis_report_{selected_store}_{selected_segment}.md",
                mime="text/markdown"
            )

if __name__ == "__main__":
    main()
